//bubble sort
#include <stdio.h>
//Function for swapping
void swap(int *a, int *b)
{
 int temp = *a;
 *a = *b;
 *b = temp;
}
// Function to Print array
void printArray(int array[], int size)
{
 for (int i = 0; i < size; ++i)
 {
 printf("%d ", array[i]);
 }
 printf("\n");
}
// Perform the bubble sort
void bubbleSort(int array[], int size)
{
 int x;
 // loop to access each array element
 for (int step = 0; step < size - 1; ++step)
 {
 // loop to compare array elements
 for (int i = 0; i < size - step - 1; ++i)
 {
 // compare two adjacent elements
 // change > to < to sort in descending order
 if (array[i] > array[i + 1])
 {
 // swapping occurs if elements are not in the intended order
 swap(&array[i], &array[i+1]);
 // printing Steps
 printArray(array, size);
 }
 }
 }
}
// Driver Code
int main()
{
 int data[50], size;
 // Input Array
 printf("How many Elements do you have? \n");
 scanf("%d", &size);
 for (int i = 0; i < size; i++)
 {
 printf("Enter Element %d: ", i);
 scanf("%d", &data[i]);
 }
 printf("\nUnsorted Array: \n");
 printArray(data, size);
 printf("\nSteps: \n");
 bubbleSort(data, size);
 printf("Sorted Array in Ascending Order:\n");
 printArray(data, size);
}
//bubble sort adaptive
#include <stdio.h>
void swap(int *x, int *y) {
 int temp = *x;
 *x = *y;
 *y = temp;
}
void printArray(int arr[], int size) {
 for (int i = 0; i < size; i++)
 printf("%d ", arr[i]);
 printf("\n");
}
void optimizedBubbleSort(int arr[], int n) {
 int swapped;
 for (int i = 0; i < n - 1; i++) {
 swapped = 0;
 for (int j = 0; j < n - i - 1; j++) {
 if (arr[j] > arr[j + 1]) {
 swap(&arr[j], &arr[j + 1]);
 swapped = 1;
 }
 }
 printArray(arr, n);
 // If no two elements were swapped in the inner loop, the 
array is already sorted
 if (swapped == 0)
 break;
}
}
int main() {
 int arr[] = {1,2,73,44,5,67,7};
 int n = sizeof(arr) / sizeof(arr[0]);
 printf("Original array: ");
 printArray(arr, n);
 optimizedBubbleSort(arr, n);
 printf("Sorted array: ");
 printArray(arr, n);
 return 0;
}
//bubble sort by recursion
#include <stdio.h>
void swap(int *a, int *b) {
 int temp = *a;
 *a = *b;
 *b = temp;
}
void recursiveBubbleSort(int arr[], int n) {
 if (n == 1)
 return;
 for (int i = 0; i < n - 1; i++) {
 if (arr[i] > arr[i + 1]) {
 swap(&arr[i], &arr[i + 1]);
 }
 }
 recursiveBubbleSort(arr, n - 1);
}
int main() {
 int arr[] = {5, 9, 1, 3, 7}; // Array to be sorted
 int n = sizeof(arr) / sizeof(arr[0]);
 printf("Original array: ");
 for (int i = 0; i < n; i++) {
 printf("%d ", arr[i]);
 }
 printf("\n");
 recursiveBubbleSort(arr, n);
 printf("Sorted array: ");
 for (int i = 0; i < n; i++) {
 printf("%d ", arr[i]);
 }
 return 0;
}
